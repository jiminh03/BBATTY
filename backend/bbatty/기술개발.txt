=== BBATTY API 명세서 ===

1. 헬스체크 API
   - Method: GET
   - URL: /health
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers: 없음
   - Response:
     * Status: 200 OK
     * Body: "OK"

=== 예정 API ===

2. 게시글 목록 조회
   - Method: GET
   - URL: /api/posts
   - Request Body: 없음
   - Query Parameters:
     * page (optional): 페이지 번호 (기본값: 0)
     * size (optional): 페이지 크기 (기본값: 10)
     * teamId (optional): 특정 팀 게시글만 조회
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "content": [
           {
             "id": 1,
             "title": "게시글 제목",
             "content": "게시글 내용",
             "teamId": 1,
             "author": {
               "id": 1,
               "nickname": "작성자명",
               "profileImg": "profile.jpg"
             },
             "viewCount": 50,
             "createdAt": "2024-01-01T00:00:00",
             "updatedAt": "2024-01-01T00:00:00",
             "likeCount": 10,
             "commentCount": 5,
             "isSameTeam": false
           }
         ],
         "totalElements": 100,
         "totalPages": 10
       }

3. 게시글 상세 조회
   - Method: GET
   - URL: /api/posts/{postId}
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "id": 1,
         "title": "게시글 제목",
         "content": "게시글 내용",
         "teamId": 1,
         "viewCount": 100,
         "isSameTeam": false,
         "createdAt": "2024-01-01T00:00:00",
         "updatedAt": "2024-01-01T00:00:00",
         "author": {
           "id": 1,
           "nickname": "작성자명",
           "profileImg": "profile.jpg",
           "teamId": 1
         },
         "likeCount": 10
         "comments": [
           {
             "id": 1,
             "content": "댓글 내용",
             "depth": 0,
             "parentId": null,
             "author": {
               "id": 2,
               "nickname": "댓글작성자"
             },
             "createdAt": "2024-01-01T01:00:00",
             "updatedAt": "2024-01-01T01:00:00"
           }
         ]
       }

4. 게시글 작성
   - Method: POST
   - URL: /api/posts
   - Request Body: {
       "title": "게시글 제목",
       "content": "게시글 내용",
       "teamId": 1
       "isSameTeam": false
     }
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
     * Content-Type: application/json
   - Response:
     * Status: 201 Created
     * Body: {
         "id": 1,
         "message": "게시글이 성공적으로 작성되었습니다."
       }

5. 게시글 수정
   - Method: PUT
   - URL: /api/posts/{postId}
   - Request Body: {
       "title": "수정된 제목",
       "content": "수정된 내용",
       "images": ["image1.jpg"]
     }
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
     * Content-Type: application/json
   - Response:
     * Status: 200 OK
     * Body: {
         "message": "게시글이 성공적으로 수정되었습니다."
       }

6. 게시글 삭제
   - Method: DELETE
   - URL: /api/posts/{postId}
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "message": "게시글이 성공적으로 삭제되었습니다."
       }

7. 게시글 좋아요
   - Method: POST
   - URL: /api/posts/{postId}/like
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "liked": true,
         "likeCount": 11
       }

8. 게시글 좋아요 취소
   - Method: DELETE
   - URL: /api/posts/{postId}/like
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "liked": false,
         "likeCount": 10
       }

9. 댓글 작성
   - Method: POST
   - URL: /api/posts/{postId}/comments
   - Request Body: {
       "content": "댓글 내용",
       "parentId": null,
       "depth": 0
     }
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
     * Content-Type: application/json
   - Response:
     * Status: 201 Created
     * Body: {
         "id": 1,
         "content": "댓글 내용",
         "depth": 0,
         "parentId": null,
         "author": {
           "id": 1,
           "nickname": "작성자명"
         },
         "createdAt": "2024-01-01T00:00:00",
         "updatedAt": "2024-01-01T00:00:00"
       }

10. 댓글 수정
   - Method: PUT
   - URL: /api/comments/{commentId}
   - Request Body: {
       "content": "수정된 댓글 내용"
     }
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
     * Content-Type: application/json
   - Response:
     * Status: 200 OK
     * Body: {
         "message": "댓글이 성공적으로 수정되었습니다."
       }

11. 댓글 삭제
   - Method: DELETE
   - URL: /api/comments/{commentId}
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "message": "댓글이 성공적으로 삭제되었습니다."
       }

12. 이미지 업로드
   - Method: POST
   - URL: /api/images
   - Request Body: multipart/form-data
     * file: 이미지 파일
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
     * Content-Type: multipart/form-data
   - Response:
     * Status: 200 OK
     * Body: {
         "imageUrl": "https://s3.amazonaws.com/bucket/image.jpg"
       }

=== 사용자 관련 API ===

13. 사용자 회원가입
   - Method: POST
   - URL: /api/users/signup
   - Request Body: {
       "nickname": "사용자닉네임",
       "email": "user@example.com",
       "teamId": 1,
       "gender": "MALE",
       "age": 25,
       "introduction": "자기소개",
       "kakaoId": "kakao123456"
     }
   - Query Parameters: 없음
   - Headers:
     * Content-Type: application/json
   - Response:
     * Status: 201 Created
     * Body: {
         "id": 1,
         "message": "회원가입이 성공적으로 완료되었습니다."
       }

14. 사용자 프로필 조회
   - Method: GET
   - URL: /api/users/{userId}
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "id": 1,
         "nickname": "사용자닉네임",
         "teamId": 1,
         "gender": "MALE",
         "age": 25,
         "role": "USER",
         "profileImg": "profile.jpg",
         "introduction": "자기소개",
         "createdAt": "2024-01-01T00:00:00",
         "badges": [
           {
             "id": 1,
             "name": "직관왕",
             "type": "PERMANENT",
             "category": "ATTENDANCE"
           }
         ]
       }

15. 사용자 프로필 수정
   - Method: PUT
   - URL: /api/users/{userId}
   - Request Body: {
       "nickname": "수정된닉네임",
       "profileImg": "new_profile.jpg",
       "introduction": "새로운 자기소개"
     }
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
     * Content-Type: application/json
   - Response:
     * Status: 200 OK
     * Body: {
         "message": "프로필이 성공적으로 수정되었습니다."
       }

=== 팀 관련 API ===

16. 팀 목록 조회
   - Method: GET
   - URL: /api/teams
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers: 없음
   - Response:
     * Status: 200 OK
     * Body: [
         {
           "id": 1,
           "name": "삼성 라이온즈",
           "wins": 80,
           "draws": 2,
           "loses": 60,
           "rank": 1,
           "winRate": 0.571,
           "gb": 0.0
         }
       ]

17. 팀 상세 정보 조회
   - Method: GET
   - URL: /api/teams/{teamId}
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers: 없음
   - Response:
     * Status: 200 OK
     * Body: {
         "id": 1,
         "name": "삼성 라이온즈",
         "wins": 80,
         "draws": 2,
         "loses": 60,
         "rank": 1,
         "winRate": 0.571,
         "gb": 0.0,
         "updatedAt": "2024-01-01T00:00:00"
       }

=== 경기 관련 API ===

18. 경기 목록 조회
   - Method: GET
   - URL: /api/games
   - Request Body: 없음
   - Query Parameters:
     * date (optional): 경기 날짜 (YYYY-MM-DD)
     * teamId (optional): 특정 팀 경기만 조회
     * status (optional): 경기 상태 (SCHEDULED, FINISHED, CANCELLED)
   - Headers: 없음
   - Response:
     * Status: 200 OK
     * Body: [
         {
           "id": 1,
           "homeTeam": {
             "id": 1,
             "name": "삼성 라이온즈"
           },
           "awayTeam": {
             "id": 2,
             "name": "LG 트윈스"
           },
           "status": "FINISHED",
           "homeScore": 5,
           "awayScore": 3,
           "dateTime": "2024-01-01T14:00:00",
           "result": "HOME_WIN",
           "stadium": "대구삼성라이온즈파크",
           "latitude": 35.8411,
           "longitude": 128.6817,
           "doubleHeader": false
         }
       ]

19. 경기 상세 정보 조회
   - Method: GET
   - URL: /api/games/{gameId}
   - Request Body: 없음
   - Query Parameters: 없음
   - Headers: 없음
   - Response:
     * Status: 200 OK
     * Body: {
         "id": 1,
         "homeTeam": {
           "id": 1,
           "name": "삼성 라이온즈"
         },
         "awayTeam": {
           "id": 2,
           "name": "LG 트윈스"
         },
         "status": "FINISHED",
         "homeScore": 5,
         "awayScore": 3,
         "dateTime": "2024-01-01T14:00:00",
         "result": "HOME_WIN",
         "stadium": "대구삼성라이온즈파크",
         "latitude": 35.8411,
         "longitude": 128.6817,
         "doubleHeader": false,
         "createdAt": "2024-01-01T00:00:00",
         "updatedAt": "2024-01-01T20:00:00"
       }

=== 직관 인증 관련 API ===

20. 직관 인증 등록
   - Method: POST
   - URL: /api/attendance
   - Request Body: {
       "gameId": 1,
       "latitude": 35.8411,
       "longitude": 128.6817
     }
   - Query Parameters: 없음
   - Headers:
     * Authorization: Bearer {access_token}
     * Content-Type: application/json
   - Response:
     * Status: 201 Created
     * Body: {
         "id": 1,
         "message": "직관 인증이 성공적으로 등록되었습니다.",
         "isValid": true
       }

21. 사용자 직관 기록 조회
   - Method: GET
   - URL: /api/attendance/user/{userId}
   - Request Body: 없음
   - Query Parameters:
     * page (optional): 페이지 번호 (기본값: 0)
     * size (optional): 페이지 크기 (기본값: 10)
   - Headers:
     * Authorization: Bearer {access_token}
   - Response:
     * Status: 200 OK
     * Body: {
         "content": [
           {
             "id": 1,
             "game": {
               "id": 1,
               "homeTeam": "삼성 라이온즈",
               "awayTeam": "LG 트윈스",
               "dateTime": "2024-01-01T14:00:00",
               "stadium": "대구삼성라이온즈파크"
             },
             "isValid": true
           }
         ],
         "totalElements": 50,
         "totalPages": 5
       }