package com.ssafy.chat.common.handler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ssafy.chat.common.dto.SessionInfo;
import com.ssafy.chat.common.dto.SessionTokenInfo;
import com.ssafy.chat.common.service.DistributedSessionManagerService;
import com.ssafy.chat.common.service.SessionTokenService;
import com.ssafy.chat.common.util.KSTTimeUtil;
import com.ssafy.chat.common.util.TestModeUtil;
import com.ssafy.chat.common.enums.MessageType;
import com.ssafy.chat.match.service.MatchChatService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.*;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;

/**
 * ÌÜµÌï© Ï±ÑÌåÖ WebSocket Ìï∏Îì§Îü¨
 * sessionToken Í∏∞Î∞òÏúºÎ°ú Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÎßå WebSocket Ïó∞Í≤∞ ÌóàÏö©
 * REST APIÏóêÏÑú ÏÇ¨Ï†ÑÏóê Î∞© Ï°¥Ïû¨ Ïó¨Î∂ÄÏôÄ Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌïú ÏÉÅÌÉú
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class ChatWebSocketHandler extends TextWebSocketHandler {
    
    private final SessionTokenService sessionTokenService;
    private final DistributedSessionManagerService sessionManager;
    private final ObjectMapper objectMapper;
    private final MatchChatService matchChatService;
    private final TestModeUtil testModeUtil;
    
    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        try {
            log.debug("WebSocket Ïó∞Í≤∞ ÏãúÎèÑ - sessionId: {}", session.getId());
            
            // 1. URLÏóêÏÑú sessionToken Ï∂îÏ∂ú
            String sessionToken = extractSessionToken(session);
            if (sessionToken == null) {
                sendErrorAndClose(session, "SESSION_TOKEN_REQUIRED", "ÏÑ∏ÏÖò ÌÜ†ÌÅ∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
                return;
            }
            
            // üß™ ÌÖåÏä§Ìä∏ Î™®Îìú Ï≤¥ÌÅ¨ Î∞è Ï≤òÎ¶¨
            SessionTokenInfo tokenInfo;
            if (testModeUtil.isTestMode(sessionToken)) {
                log.info("üß™ WebSocket Ìï∏Îì§Îü¨ ÌÖåÏä§Ìä∏ Î™®Îìú ÌôúÏÑ±Ìôî - sessionToken: {}", sessionToken);
                tokenInfo = testModeUtil.createTestTokenInfo(sessionToken, session);
                if (tokenInfo == null) {
                    sendErrorAndClose(session, "TEST_TOKEN_ERROR", "ÌÖåÏä§Ìä∏ ÌÜ†ÌÅ∞ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
                    return;
                }
            } else {
                // 2. sessionToken Í≤ÄÏ¶ù (Ïù¥ÎØ∏ Î∞© Ï°¥Ïû¨ Ïó¨Î∂ÄÍπåÏßÄ ÌôïÏù∏Îêú ÌÜ†ÌÅ∞)
                tokenInfo = sessionTokenService.validateToken(sessionToken);
                if (tokenInfo == null || !tokenInfo.isValid()) {
                    sendErrorAndClose(session, "INVALID_SESSION_TOKEN", "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏÑ∏ÏÖò ÌÜ†ÌÅ∞ÏûÖÎãàÎã§.");
                    return;
                }
            }
            
            // 3. ÏÑ∏ÏÖò Ï†ïÎ≥¥ ÏÉùÏÑ±
            SessionInfo sessionInfo = createSessionInfo(tokenInfo, session);
            
            // 4. Î∂ÑÏÇ∞ ÏÑ∏ÏÖò Îß§ÎãàÏ†ÄÏóê Îì±Î°ù
            sessionManager.registerSession(tokenInfo.getRoomId(), session, sessionInfo);
            
            // 5. Îß§Ïπò Ï±ÑÌåÖÏù∏ Í≤ΩÏö∞ ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìúÎ•º ÏúÑÌï¥ Îß§Ïπò Ï±ÑÌåÖ ÏÑúÎπÑÏä§ÏóêÎèÑ ÏÑ∏ÏÖò Îì±Î°ù
            if (tokenInfo.isMatchRoom()) {
                matchChatService.addSessionToMatchRoom(tokenInfo.getRoomId(), session);
                log.debug("Îß§Ïπò Ï±ÑÌåÖ ÏÑúÎπÑÏä§Ïóê ÏÑ∏ÏÖò Ï∂îÍ∞Ä ÏôÑÎ£å - roomId: {}, sessionId: {}", 
                        tokenInfo.getRoomId(), session.getId());
            }
            
            // 6. Ïó∞Í≤∞ ÏÑ±Í≥µ ÏïåÎ¶º
            sendConnectionSuccess(session, tokenInfo);
            
            log.info("WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ - roomId: {}, userId: {}, sessionId: {}", 
                    tokenInfo.getRoomId(), tokenInfo.getUserId(), session.getId());
                    
        } catch (Exception e) {
            log.error("WebSocket Ïó∞Í≤∞ Ï≤òÎ¶¨ Ïã§Ìå® - sessionId: {}", session.getId(), e);
            sendErrorAndClose(session, "CONNECTION_ERROR", "Ïó∞Í≤∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        }
    }
    
    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        try {
            // ÏÑ∏ÏÖò ÌÜ†ÌÅ∞ÏóêÏÑú Î£∏ Ï†ïÎ≥¥ Ï∂îÏ∂ú
            String sessionToken = extractSessionToken(session);
            if (sessionToken != null) {
                // üß™ ÌÖåÏä§Ìä∏ Î™®Îìú Ï≤¥ÌÅ¨ Î∞è Ï≤òÎ¶¨
                SessionTokenInfo tokenInfo;
                if (testModeUtil.isTestMode(sessionToken)) {
                    tokenInfo = testModeUtil.createTestTokenInfo(sessionToken, session);
                } else {
                    tokenInfo = sessionTokenService.validateToken(sessionToken);
                }
                
                if (tokenInfo != null) {
                    // Î∂ÑÏÇ∞ ÏÑ∏ÏÖò Îß§ÎãàÏ†ÄÏóêÏÑú Ìï¥Ï†ú
                    sessionManager.unregisterSession(tokenInfo.getRoomId(), session.getId());
                    
                    // Îß§Ïπò Ï±ÑÌåÖÏù∏ Í≤ΩÏö∞ Îß§Ïπò Ï±ÑÌåÖ ÏÑúÎπÑÏä§ÏóêÏÑúÎèÑ ÏÑ∏ÏÖò Ìï¥Ï†ú
                    if (tokenInfo.isMatchRoom()) {
                        matchChatService.removeSessionFromMatchRoom(tokenInfo.getRoomId(), session);
                        log.debug("Îß§Ïπò Ï±ÑÌåÖ ÏÑúÎπÑÏä§ÏóêÏÑú ÏÑ∏ÏÖò Ï†úÍ±∞ ÏôÑÎ£å - roomId: {}, sessionId: {}", 
                                tokenInfo.getRoomId(), session.getId());
                    }
                    
                    log.info("WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å - roomId: {}, userId: {}, status: {}", 
                            tokenInfo.getRoomId(), tokenInfo.getUserId(), status);
                }
            }
            
        } catch (Exception e) {
            log.error("WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å Ï≤òÎ¶¨ Ïã§Ìå® - sessionId: {}", session.getId(), e);
        }
    }
    
    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        try {
            // Î©îÏãúÏßÄ Ï≤òÎ¶¨Îäî Í∞Å Ï±ÑÌåÖ ÏÑúÎπÑÏä§Ïóê ÏúÑÏûÑ
            String payload = message.getPayload();
            log.debug("Î©îÏãúÏßÄ ÏàòÏã† - sessionId: {}, payload: {}", session.getId(), payload);
            
            // ÏÑ∏ÏÖò ÌÜ†ÌÅ∞ÏúºÎ°ú Î∞© Ï†ïÎ≥¥ ÌôïÏù∏
            String sessionToken = extractSessionToken(session);
            if (sessionToken == null) {
                sendError(session, "INVALID_SESSION", "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏÑ∏ÏÖòÏûÖÎãàÎã§.");
                return;
            }
            
            // üß™ ÌÖåÏä§Ìä∏ Î™®Îìú Ï≤¥ÌÅ¨ Î∞è Ï≤òÎ¶¨  
            SessionTokenInfo tokenInfo;
            if (testModeUtil.isTestMode(sessionToken)) {
                tokenInfo = testModeUtil.createTestTokenInfo(sessionToken, session);
                if (tokenInfo == null) {
                    sendError(session, "TEST_TOKEN_ERROR", "ÌÖåÏä§Ìä∏ ÌÜ†ÌÅ∞ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
                    return;
                }
            } else {
                tokenInfo = sessionTokenService.validateToken(sessionToken);
                if (tokenInfo == null) {
                    sendError(session, "SESSION_EXPIRED", "ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.");
                    return;
                }
            }
            
            // Îã®Ïàú ÌÖçÏä§Ìä∏ Î©îÏãúÏßÄ Ï≤òÎ¶¨
            handleChatMessage(session, tokenInfo, payload);
            
        } catch (Exception e) {
            log.error("Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå® - sessionId: {}", session.getId(), e);
            sendError(session, "MESSAGE_PROCESS_ERROR", "Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        }
    }
    
    @Override
    public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
        log.error("WebSocket Ï†ÑÏÜ° Ïò§Î•ò - sessionId: {}", session.getId(), exception);
        
        try {
            session.close(CloseStatus.SERVER_ERROR);
        } catch (Exception e) {
            log.error("Ï†ÑÏÜ° Ïò§Î•ò ÌõÑ ÏÑ∏ÏÖò Ï¢ÖÎ£å Ïã§Ìå®", e);
        }
    }
    
    // ===========================================
    // ÎÇ¥Î∂Ä Ìó¨Ìçº Î©îÏÑúÎìú
    // ===========================================
    
    /**
     * URLÏóêÏÑú sessionToken Ï∂îÏ∂ú
     */
    private String extractSessionToken(WebSocketSession session) {
        try {
            URI uri = session.getUri();
            if (uri != null && uri.getQuery() != null) {
                String query = uri.getQuery();
                String[] params = query.split("&");
                for (String param : params) {
                    String[] keyValue = param.split("=");
                    if ("sessionToken".equals(keyValue[0]) && keyValue.length > 1) {
                        return keyValue[1];
                    }
                }
            }
            
            // Ìó§ÎçîÏóêÏÑúÎèÑ ÌôïÏù∏
            Object tokenHeader = session.getAttributes().get("sessionToken");
            if (tokenHeader != null) {
                return tokenHeader.toString();
            }
            
        } catch (Exception e) {
            log.error("sessionToken Ï∂îÏ∂ú Ïã§Ìå®", e);
        }
        return null;
    }
    
    /**
     * SessionInfo ÏÉùÏÑ±
     */
    private SessionInfo createSessionInfo(SessionTokenInfo tokenInfo, WebSocketSession session) {
        long kstNow = KSTTimeUtil.nowAsTimestamp();
        return SessionInfo.builder()
            .sessionToken(tokenInfo.getToken())
            .userId(tokenInfo.getUserId())
            .nickname(tokenInfo.getNickname())
            .teamId(tokenInfo.getTeamId())
            .teamName(tokenInfo.getTeamName())
            .roomId(tokenInfo.getRoomId())
            .roomType(tokenInfo.getRoomType())
            .gameId(tokenInfo.getGameId())
            .connectedAt(kstNow)
            .lastActivityAt(kstNow)
            .isValid(true)
            .build();
    }
    
    /**
     * Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï≤òÎ¶¨
     */
    private void handleChatMessage(WebSocketSession session, SessionTokenInfo tokenInfo, String content) {
        try {
            if (content == null || content.trim().isEmpty()) {
                sendError(session, "EMPTY_MESSAGE", "Î©îÏãúÏßÄ ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.");
                return;
            }
            
            // Îß§Ïπò Ï±ÑÌåÖÏù∏ Í≤ΩÏö∞ KafkaÎ•º ÌÜµÌïú Ï≤òÎ¶¨
            if (tokenInfo.isMatchRoom()) {
                handleMatchChatMessage(session, tokenInfo, content.trim());
            } else {
                // Í¥ÄÏ†Ñ Ï±ÑÌåÖÏùÄ Î∂ÑÏÇ∞ ÏÑ∏ÏÖò Îß§ÎãàÏ†ÄÎ•º ÌÜµÌï¥ ÏßÅÏ†ë Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
                String broadcastMessage = createBroadcastMessage(tokenInfo, content.trim());
                sessionManager.broadcastToRoom(tokenInfo.getRoomId(), broadcastMessage, null);
            }
            
            log.debug("Î©îÏãúÏßÄ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ ÏôÑÎ£å - roomId: {}, userId: {}, content: {}", 
                    tokenInfo.getRoomId(), tokenInfo.getUserId(), content.trim());
                    
        } catch (Exception e) {
            log.error("Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå®", e);
            sendError(session, "BROADCAST_ERROR", "Î©îÏãúÏßÄ Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        }
    }
    
    /**
     * Îß§Ïπò Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï≤òÎ¶¨ (KafkaÎ•º ÌÜµÌïú Î∏åÎ°úÎìúÏ∫êÏä§ÌåÖ)
     */
    private void handleMatchChatMessage(WebSocketSession session, SessionTokenInfo tokenInfo, String content) {
        try {
            // MatchChatMessage ÏÉùÏÑ±
            com.ssafy.chat.match.dto.MatchChatMessage matchMessage = new com.ssafy.chat.match.dto.MatchChatMessage();
            matchMessage.setMessageType(MessageType.CHAT);
            matchMessage.setRoomId(tokenInfo.getRoomId());
            matchMessage.setUserId(tokenInfo.getUserId());
            matchMessage.setNickname(tokenInfo.getNickname() != null ? tokenInfo.getNickname() : "ÏùµÎ™Ö");
            matchMessage.setContent(content);
            matchMessage.setTimestamp(KSTTimeUtil.nowAsTimestamp());
            
            // Ï∂îÍ∞Ä ÌïÑÎìú ÏÑ§Ï†ï
            matchMessage.setWinFairy(tokenInfo.getIsWinFairy() != null ? tokenInfo.getIsWinFairy() : false);
            
            // SessionTokenInfoÏóêÏÑú profileImgUrl Í∞ÄÏ†∏Ïò§Í∏∞
            log.info("Ï±ÑÌåÖ Î©îÏãúÏßÄ ÏÉùÏÑ± - tokenInfo.profileImgUrl: {}", tokenInfo.getProfileImgUrl());
            matchMessage.setProfileImgUrl(tokenInfo.getProfileImgUrl());
            
            // Îß§Ïπò Ï±ÑÌåÖ ÏÑúÎπÑÏä§Î°ú Î©îÏãúÏßÄ Ï†ÑÏÜ° (KafkaÎ•º ÌÜµÌïú Î∏åÎ°úÎìúÏ∫êÏä§ÌåÖ)
            matchChatService.sendChatMessage(tokenInfo.getRoomId(), matchMessage);
            
            log.debug("Îß§Ïπò Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å - roomId: {}, userId: {}", 
                    tokenInfo.getRoomId(), tokenInfo.getUserId());
                    
        } catch (Exception e) {
            log.error("Îß§Ïπò Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïã§Ìå® - roomId: {}, userId: {}", 
                    tokenInfo.getRoomId(), tokenInfo.getUserId(), e);
        }
    }
    
    /**
     * Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ Î©îÏãúÏßÄ ÏÉùÏÑ±
     */
    private String createBroadcastMessage(SessionTokenInfo tokenInfo, String content) {
        try {
            Map<String, Object> message = new HashMap<>();
            message.put("type", "CHAT_MESSAGE");
            message.put("roomId", tokenInfo.getRoomId());
            message.put("userId", tokenInfo.getUserId());
            message.put("nickname", tokenInfo.getNickname() != null ? tokenInfo.getNickname() : "ÏùµÎ™Ö");
            message.put("teamName", tokenInfo.getTeamName() != null ? tokenInfo.getTeamName() : "");
            message.put("content", content);
            message.put("timestamp", KSTTimeUtil.nowAsString());
            message.put("messageId", System.currentTimeMillis());
            
            return objectMapper.writeValueAsString(message);
            
        } catch (Exception e) {
            log.error("Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ Î©îÏãúÏßÄ ÏÉùÏÑ± Ïã§Ìå®", e);
            return "{\"type\":\"ERROR\",\"message\":\"Î©îÏãúÏßÄ ÏÉùÏÑ± Ïã§Ìå®\"}";
        }
    }
    
    /**
     * Ïó∞Í≤∞ ÏÑ±Í≥µ ÏïåÎ¶º Ï†ÑÏÜ°
     */
    private void sendConnectionSuccess(WebSocketSession session, SessionTokenInfo tokenInfo) {
        try {
            Map<String, Object> response = new HashMap<>();
            response.put("type", "CONNECTION_SUCCESS");
            response.put("roomId", tokenInfo.getRoomId());
            response.put("roomType", tokenInfo.getRoomType());
            response.put("userId", tokenInfo.getUserId());
            response.put("nickname", tokenInfo.getNickname() != null ? tokenInfo.getNickname() : "ÏùµÎ™Ö");
            response.put("message", "Ï±ÑÌåÖÎ∞©Ïóê Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§.");
            response.put("timestamp", KSTTimeUtil.nowAsString());
            
            String json = objectMapper.writeValueAsString(response);
            session.sendMessage(new TextMessage(json));
            
        } catch (Exception e) {
            log.error("Ïó∞Í≤∞ ÏÑ±Í≥µ ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®", e);
        }
    }
    
    /**
     * ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Î∞è Ïó∞Í≤∞ Ï¢ÖÎ£å
     */
    private void sendErrorAndClose(WebSocketSession session, String errorCode, String message) {
        try {
            sendError(session, errorCode, message);
            Thread.sleep(100); // Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å ÎåÄÍ∏∞
            session.close(CloseStatus.POLICY_VIOLATION);
            
        } catch (Exception e) {
            log.error("ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Î∞è ÏÑ∏ÏÖò Ï¢ÖÎ£å Ïã§Ìå®", e);
        }
    }
    
    /**
     * ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°
     */
    private void sendError(WebSocketSession session, String errorCode, String message) {
        try {
            if (session.isOpen()) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("type", "ERROR");
                errorResponse.put("errorCode", errorCode);
                errorResponse.put("message", message);
                errorResponse.put("timestamp", KSTTimeUtil.nowAsString());
                
                String json = objectMapper.writeValueAsString(errorResponse);
                session.sendMessage(new TextMessage(json));
            }
            
        } catch (IOException e) {
            log.error("ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®", e);
        }
    }
}