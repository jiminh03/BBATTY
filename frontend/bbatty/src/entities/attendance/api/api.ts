import { apiClient } from '../../../shared/api';
import type { AttendanceVerificationRequest, AttendanceVerificationResponse } from './types';

export const attendanceApi = {
  // ÏßÅÍ¥Ä Ïù∏Ï¶ù
  verifyAttendance: async (location: AttendanceVerificationRequest): Promise<AttendanceVerificationResponse> => {
    try {
      console.log('üéØ ÏßÅÍ¥Ä Ïù∏Ï¶ù API ÏöîÏ≤≠ ÏãúÏûë:', location);
      const response = await apiClient.post('/api/attendance/verify', location);
      console.log('üéØ ÏßÅÍ¥Ä Ïù∏Ï¶ù API ÏùëÎãµ ÏÑ±Í≥µ:', response.data);
      return response.data;
    } catch (error: any) {
      // 400 ÏóêÎü¨Îäî ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ Ïã§Ìå®Ïù¥ÎØÄÎ°ú ÏóêÎü¨ Î°úÍ∑∏ ÏóÜÏù¥ ÏùëÎãµÎßå Î∞òÌôò
      if (error.response?.status === 400 && error.response?.data) {
        console.log('üéØ ÏßÅÍ¥Ä Ïù∏Ï¶ù API ÏùëÎãµ:', error.response.data);
        return error.response.data;
      }
      
      // ÏóêÎü¨ ÏùëÎãµÏù¥ ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú Î∞òÌôò
      if (error.response?.data) {
        console.log('üéØ ÏßÅÍ¥Ä Ïù∏Ï¶ù API ÏùëÎãµ:', error.response.data);
        return error.response.data;
      }
      
      // error.responseÍ∞Ä ÏóÜÏßÄÎßå request.statusÍ∞Ä 4xxÏù∏ Í≤ΩÏö∞ (React Native ÌôòÍ≤ΩÏóêÏÑú Î∞úÏÉù)
      const requestStatus = error.request?.status;
      if (requestStatus && requestStatus >= 400 && requestStatus < 500 && !error.response) {
        console.log(`üìã ${requestStatus} ÏóêÎü¨ - response ÌååÏã± ÏãúÎèÑ`);
        
        // XMLHttpRequestÏùò responseTextÏóêÏÑú Ïã§Ï†ú ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏãúÎèÑ
        let responseData = null;
        try {
          if (error.request.responseText) {
            responseData = JSON.parse(error.request.responseText);
          }
        } catch (parseError) {
          // ÌååÏã± Ïã§Ìå®Îäî Ï†ïÏÉÅÏ†ÅÏù∏ ÏÉÅÌô©Ïù¥ÎØÄÎ°ú Î°úÍπÖÌïòÏßÄ ÏïäÏùå
        }
        
        // ÌååÏã±Îêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ ÏÉÅÌÉúÏΩîÎìúÎ≥Ñ Í∏∞Î≥∏ Î©îÏãúÏßÄ
        if (responseData) {
          console.log('üéØ ÏßÅÍ¥Ä Ïù∏Ï¶ù API ÏùëÎãµ:', responseData);
          return responseData;
        }
        
        // ÌååÏã± Ïã§Ìå® Ïãú ÏÉÅÌÉúÏΩîÎìúÎ≥Ñ Í∏∞Î≥∏ Î©îÏãúÏßÄ
        const defaultMessages = {
          400: 'Í≤ΩÍ∏∞ ÏãúÍ∞ÑÏóêÎßå Ïù∏Ï¶ùÌï† Ïàò ÏûàÏñ¥Ïöî.',
          404: 'Ïò§ÎäòÏùÄ Ïö∞Î¶¨ ÌåÄ Í≤ΩÍ∏∞Í∞Ä ÏóÜÏñ¥Ïöî.',
          409: 'Ïù¥ÎØ∏ Ìï¥Îãπ Í≤ΩÍ∏∞Ïóê ÎåÄÌï¥ ÏßÅÍ¥Ä Ïù∏Ï¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏñ¥Ïöî.',
        };
        
        const response = {
          status: 'ERROR',
          message: defaultMessages[requestStatus as keyof typeof defaultMessages] || 'Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
          data: null
        };
        console.log('üéØ ÏßÅÍ¥Ä Ïù∏Ï¶ù API ÏùëÎãµ:', response);
        return response;
      }
      
      // Ïó¨Í∏∞ÍπåÏßÄ ÏôîÎã§Î©¥ Ïã§Ï†ú ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÎÇò ÏòàÏÉÅÏπò Î™ªÌïú ÏóêÎü¨
      console.error('üö® ÏßÅÍ¥Ä Ïù∏Ï¶ù API ÏöîÏ≤≠ Ïã§Ìå®:', {
        message: error.message,
        code: error.code,
        status: error.response?.status,
      });
      
      // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Îì±Ïùò Í≤ΩÏö∞ ÏòàÏô∏Î•º Îã§Ïãú ÎçòÏ†∏ÏÑú ÏÉÅÏúÑÏóêÏÑú Ï≤òÎ¶¨ÌïòÎèÑÎ°ù Ìï®
      throw error;
    }
  },
};